using UnityEngine;
using System.Collections;
using UnityEngine.Networking;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class MyNetworkManager : NetworkManager {

    public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId) {
        if (TestController.tcontrol.sceneIndex == TestController.tcontrol.tasksToPermute + 1) return; //The +1 is because of the howtouse initial task
        base.OnServerAddPlayer(conn,playerControllerId);
    }

    public override void OnClientSceneChanged(NetworkConnection conn) {
        StartCoroutine(Wait(conn));
    }


    IEnumerator Wait(NetworkConnection conn) { // wait until saving the resumed log.
        yield return new WaitForSeconds(1);
        base.OnClientSceneChanged(conn);
    }

    public override void ServerChangeScene(string newSceneName) {
        base.ServerChangeScene(newSceneName);
    }

    public void StartMyHost() {
        MainController.Landscape = GameObject.Find("Panel").transform.GetChild(4).GetComponent<Toggle>().isOn;
        SetPort();
        NetworkManager.singleton.StartHost();
<<<<<<< HEAD
        
=======
        ShowLoading();
>>>>>>> master
    }

    public void SetPort() {
        NetworkManager.singleton.networkPort = 7777;
    }

    public void JoinGame() {
        MainController.Landscape = GameObject.Find("Panel").transform.GetChild(4).GetComponent<Toggle>().isOn;
        SetIpAddress();
        SetPort();
        NetworkManager.singleton.StartClient();
        ShowLoading();
    }


    public void ShowLoading() {
        GameObject.Find("Panel").transform.GetChild(0).gameObject.SetActive(true);
        GameObject.Find("Panel").transform.GetChild(1).gameObject.SetActive(false);
        GameObject.Find("Panel").transform.GetChild(2).gameObject.SetActive(false);
        GameObject.Find("Panel").transform.GetChild(3).gameObject.SetActive(false);
        GameObject.Find("Panel").transform.GetChild(4).gameObject.SetActive(false);
        GameObject.Find("Panel").transform.GetChild(5).gameObject.SetActive(false);

    }


    void SetIpAddress() {
        string ipAddress = GameObject.Find("InputFieldIPAddress").transform.FindChild("Text").GetComponent<Text>().text;
        NetworkManager.singleton.networkAddress = ipAddress;
    }

}
